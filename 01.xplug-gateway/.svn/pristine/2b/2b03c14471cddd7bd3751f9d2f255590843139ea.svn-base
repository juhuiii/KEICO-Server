'use strict';


// Global Config
const config = require("config");
const http_port = config.get('http.port');
const dbfile    = config.get('database.file');
const mqtt_addr = config.get('mqtt.addr');
const mqtt_port = config.get('mqtt.port');

const topic_publish     = "adapter/gw";
const topic_subscribe   = "gw/#";


// External Dependencies
require('./log-timestamps');
const mqtt = require('mqtt');


// { error: 0, warn: 1, info: 2, verbose: 3, debug: 4, silly: 5 }
console.silly('silly');
console.debug('debug');
console.verbose('verbose');
console.info('info');
console.warn('warn');
console.error('error');


// Internal Dependencies
const dbCmdListner = require('./db-command');
const dbSql = require('./db-sql');  dbSql.open();

const Webapi = require("./web-api");
Webapi.init();
Webapi.start(http_port);

const blThread = require('./bl-thread');
const zbGroupThread = require('./zbgroup-thread');

console.info(`Start xPlug Application [ http.port=${http_port} , dbfile=${dbfile}, mqtt.port=mqttp:${mqtt_addr}:${mqtt_port}]`);

const mqttClient  = mqtt.connect(`mqtt://${mqtt_addr}:${mqtt_port}`);
mqttClient.on('connect', function ()  
{
    console.info(`MQTT Connected OK.... mqtt.port=mqttp:${mqtt_addr}:${mqtt_port}]`);

    mqttClient.subscribe(topic_subscribe);
});

mqttClient.on('message', function (topic, message) 
{
    let jsonMsg = JSON.parse(message);  

    console.log(`onMessage from zigbee MSG='${message}'` );

    switch( jsonMsg.cmd  )
    {
        case 'SC'           :   //Scan Channel
        case 'JOIN_START'   :   //Permit Join Start 
        case 'JOIN_STOP'    :   //Permit Join Stop                
        case 'ON'           :   //Switch ON 
        case 'OFF'          :   //Switch OFF
        case 'DEV_DEL'      :   //Delete Device                
            dbSql.updateCommandRecvAck(jsonMsg);             // Only Packet kind = 3
            break;
        case 'CH'           :       //Read Channel           //  Packet kind = 3 or 0
            if( jsonMsg.pkn == 3 )  //ACK 응답  :  패킷구분 : [0:통보(응답불필요),1:요청(응답요구),2:요청(응답불필요),3:응답 ]	            
                dbSql.updateCommandRecvAck(jsonMsg);
            else if ( jsonMsg.pkn == 0 )
                dbSql.updateCommandRecvData(jsonMsg);
            break;
        case 'ONOFF'        :                               // Packet Kind = 0
        case 'DEV_ADD'      : 
        case 'KW'           : 
        case 'KWH'          :
            dbSql.recvMeasData(jsonMsg);
            break;
        case 'GROUP'        :
        case 'READ'         :
            dbSql.recvMeasDataV2(jsonMsg);
            break;

        default :
            console.error( `unknown command='${jsonMsg.cmd}'` );
    }    
});





dbCmdListner.on('oncommand', function(data) 
{
    console.log(`onCommand from DB : CMD='${data['CMD_CD']}', PARAM='${data['CMD_PARAM']}'` );
    
    let jsonStr  =  CommandParser.cmd2Json( data );
    if( jsonStr ) {

        data["SND_ST" ] = 1;    //송신처리상태(0:송신대기중,1:송신완료,2::송신실패)
        data["PRCS_ST"] = 1;    //명령처리상태(0:대기중, 1:처리중, 2:완료성공, 3:실패완료)
                                //응답수신상태(0:응답대기, 1:ACK응답수신완료, 2: Data응답수신완료, 3:응답수신실패)
        mqttClient.publish(topic_publish, `${jsonStr}`);        
        console.log(`Send to Zigbee MSG='${jsonStr}'` );
        
        dbSql.updateCommandSend(data).then((resolt) => {
            console.log( "Send OK apply to updateCommandSend" );
        }).catch(function (reason) {
            console.error( reason);
        }); 
    } else {
        data["SND_ST"  ] = 1;
        data["PRCS_ST" ] = 3;
        
        dbSql.updateCommandSend(data).then((resolt) => {
            console.log( "Send fail apply to updateCommandSend Stat" );
        }).catch(function (reason) {
            console.error( reason);
        });
    }    
});


// DBCommand to JSON 
const CommandParser = {

    cmd2Json : (cmd) =>{
        let obj = null;
        switch( cmd.CMD_CD )
        {
            case 'SC'           :   //Scan Channel
            case 'JOIN_START'   :   //Permit Join Start 
            case 'JOIN_STOP'    :   //Permit Join Stop                
            case 'ON'           :   //Switch ON 
            case 'OFF'          :   //Switch OFF
            case 'DEV_DEL'      :   //Delete Device 
            case 'CH'           :   //Read Channel 
                obj = {
                    "pkn"  : 1   ,	            //M=패킷구분  			[0:통보(응답불필요),1:요청(응답요구),2:요청(응답불필요),3:응답 ]	                    
                    "cmd"  : cmd['CMD_CD'],	    //M=명령종류  				
                    "tno"  : cmd['CMD_SQ'], 	//M=트랜잭션번호 		
                    "data" : cmd['CMD_PARAM'] ? cmd['CMD_PARAM'].split(",") : null
                };
                break;
            case 'READ'         :   //Zigbee Group (Add Group or View Group)                
            case 'CTL'          :   //Zigbee Group (Add Group or View Group)                
            case 'GROUP'        :   //Zigbee Group (Add Group or View Group)
                obj = {
                    "pkn"  : 1   ,	            //M=패킷구분  			[0:통보(응답불필요),1:요청(응답요구),2:요청(응답불필요),3:응답 ]	                    
                    "cmd"  : cmd['CMD_CD'],	    //M=명령종류  				
                    "tno"  : cmd['CMD_SQ'], 	//M=트랜잭션번호 		
                    "data" : JSON.parse(cmd['CMD_PARAM'] ) 
                };
                break;            
            default : 
                console.error(`Unkowun command ${cmd.CMD_CD}`);
        }
        return JSON.stringify(obj);
    }
};
