import { Component, OnInit } from '@angular/core';
import { ApiService } from 'src/app/services/api.service';
import { XgModalService } from 'src/app/commonUX/xg-modal.service';
import * as moment from 'moment';
import { Ng4LoadingSpinnerService } from 'ng4-loading-spinner';

@Component({
  selector: 'app-mod-control',
  templateUrl: './mod-control.component.html',
  styleUrls: ['./mod-control.component.scss']
})
export class ModControlComponent implements OnInit {

  constructor(private api: ApiService, private modal: XgModalService, private spinner: Ng4LoadingSpinnerService) { }

  private count = 0;

  ngOnInit() {
  }

  onClick_AllOn() {

    this.modal.confirmOnOff("제어", "기기를 ON 하시겠읍니까?").subscribe(result => {

      if (result === 1) {

        this.count = 0;
        this.spinner.show();
        setTimeout(() => { this.checkControl('on'); }, 1000);

        this.api.allOn().subscribe(response => {
          if (response['rcd'] !== 0) {
            this.spinner.hide();
            this.modal.alert("알림", response['rms']);
          }
        }, error => {
          this.spinner.hide();
          this.modal.alert("알림", error['rms']);
        });
      }
    });
  }

  onClick_AllOff() {
    
    // OFF 시에만 체크
    // 운영시간 체크, 운영자 or 관리자 비번 
    let now = Number(moment().format("HHmm"));

    let isWorkTime = (now >= this.api.siteInfo.WORK_STM && now <= this.api.siteInfo.WORK_ETM);

    let comment = "운영자 비밀번호";
    if (isWorkTime) {
      comment = "관리자 비밀번호";
    }

    this.modal.confirmPass(comment, "").subscribe(result => {

      if (this.api.isEmpty(result)) {
        return;
      }

      let pass = this.api.siteInfo['OPER_PW'];
      if (isWorkTime) {
        pass = this.api.siteInfo['MNGR_PW'];
      }

      if (result !== pass ) {
        this.modal.alert("알림", "입력하신 비밀번호가 맞지 않습니다.");
        return;
      }

      this.testPlug();
    });
  }

  testPlug() {

    let used = false;
    this.api.plugs.forEach(plug => {

      //  통신이상 skip
      if (plug.DEV_ST !== 1)
        return;

      //  자동제어 SKIP
      if (plug.MANU_CTL_ALLOW !== 1)
        return;

      if (plug.SW_ST !== 1)
        return;

      // 대기전력 이상이면
      if (plug.KW > plug.STBY_KW)
        used = true;

    });

    if (used == false) {
      // this.modal.confirmOnOff("제어", "기기를 OFF 하시겠읍니까?").subscribe(result => {
      //   if (result === 1) {
          this.controlSwitch('y');
      //   }
      // });
      return;
    }

    this.modal.confirmSwitch("제어", "기기가 사용중입니다. 강제 또는 제외하고 OFF 하시겠읍니까?").subscribe(result => {

      //  Confirm : 제외
      if (result === 1)
        this.controlSwitch("y");
      else
        if (result === 2)
          this.controlSwitch("n");
    })
  }

  controlSwitch(filter) {

    this.count = 0;
    this.spinner.show();
    setTimeout(() => { this.checkControl('off'); }, 1000);

    this.api.allOff(filter).subscribe(response => {
      if (response['rcd'] !== 0) {
        this.spinner.hide();
        this.modal.alert("알림", response['rms']);
      }
    }, error => {
      this.spinner.hide();
      this.modal.alert("알림", error.status + ":" + error.statusText);
    });
  }

  checkControl(onoff) {

    let finished = true;

    this.api.plugs.forEach(plug => {

      //  통신이상 skip
      if (plug.DEV_ST !== 1) return;

      //  자동제어 SKIP
      if (plug.MANU_CTL_ALLOW !== 1) return;

      if (onoff == 'off' && plug.SW_ST === 1) {
        finished = false;
        return;
      }

      if (onoff == 'on' && plug.SW_ST === 0) {
        finished = false;
        return;
      }
    });

    if (finished) {
      this.spinner.hide();
      return;
    }

    if (this.count++ >= 2) {
      this.spinner.hide();
      return;
    }

    setTimeout(() => { this.checkControl(onoff); }, 987);
  }
}
