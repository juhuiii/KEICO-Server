const express = require('express');
const bodyParser = require('body-parser')
const dbSql = require('../db-sql');
const cors = require('cors');
const xpUtils = require("../utils");

dbSql.open();

const DEBUG = false;


function getRES_PACKET(rcd = 0, rms='', data={}) {
    return { rcd:rcd, rms:rms, data:data };
}

module.exports = {
    app: null,
    viewApp: null,
    restApp: null,
    server: null,

    init() {
        if (this.app) return;
       
        this.app = express();        
        this.app.set('view engine', 'ejs');
        this.app.engine('html', require('ejs').renderFile );
        this.app.use(cors());
        this.app.use(bodyParser.json());

        this.restApp = express.Router();
        this.viewApp = express.Router();

        this.app.use("/rest", this.restApp);        
        this.app.use("/", express.static(__dirname + '/views'));
        

        ////////////////////// Rest API //////////////////////
        ////////////////////// Rest API //////////////////////
        ////////////////////// Rest API //////////////////////

        this.restApp.get('/find_channel', async (req, res) => {     //채널검색  수정             
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;
            
            try
            {
                CMD = "SC";
                CMD_PARAM = "";
                await dbSql.insertCommand(CMD, CMD_PARAM);        //즉시제어 
                res.send( getRES_PACKET(0, `${CMD} OK`,""));
            }
            catch ( reason )
            {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            }            
        });



        this.restApp.get('/permit_join/:SEC', async (req, res) => {     //퍼밋 조인  수정             
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let SEC = req.param('SEC', '');
            try
            {       
                let CMD = "";   
                let CMD_PARAM  = "";
                if( !isNaN(Number(SEC)) && Number(SEC) > 0 ){
                    CMD = "JOIN_START";
                    CMD_PARAM = SEC;
                }else {
                    CMD = "JOIN_STOP";
                    CMD_PARAM = 0;
                }
                await dbSql.insertCommand(CMD, CMD_PARAM);        //즉시제어 
                               
                //res.send(new RES_PACKET(0, `${CMD} OK`,""));
                res.send(getRES_PACKET(0, `${CMD} OK`,""));


            }
            catch ( reason )
            {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            }            
        });


        this.restApp.get('/sites', (req, res) => {             //현장정보 조회 
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            dbSql.selectSite().then((rows) => {
                res.send(_this.makeDataRespons(rows));
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            });
        });
        this.restApp.post('/sites/:STE_SQ', (req, res) => {     //현장정보 수정 
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;
            
            let STE_SQ = req.param('STE_SQ', '');

            
            delete req.body["INS_DT_STR"];       //업데이트 되면 안되는 항목들 
            delete req.body["INS_DT"];       //업데이트 되면 안되는 항목들 

            delete req.body["REG_DTIME"];
            delete req.body["WORK_ETM_STR"];
            delete req.body["WORK_STM_STR"];

            dbSql.updateSite(req.body, STE_SQ).then((result) => {                
                //res.send(new RES_PACKET());
                res.send(getRES_PACKET());
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            });
        });


        this.restApp.get('/devices', (req, res) => {             //플러그 목록조회
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            dbSql.selectDevices().then((rows) => {
                res.send(_this.makeDataRespons(rows));
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorRespose(1, reason));
            });
        });
        this.restApp.get('/devices/:ZB_ADDR', (req, res) => {   //플러그 개별조회
            DEBUG && console.log(req.method, req.originalUrl); let _this = this; 
            
            let ZB_ADDR = req.param('ZB_ADDR', '');
            dbSql.selectDevice(ZB_ADDR).then((rows) => {                
                res.send(_this.makeDataRespons(rows, true));
            }).catch(function (reason) {         
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            });
        });
        this.restApp.delete('/devices/:ZB_ADDR',  async (req, res) => {   //플러그 삭제
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let ZB_ADDR = req.param('ZB_ADDR', '');
            
            try
            {
                await dbSql.deleteDayReport(ZB_ADDR);   //보고서 삭제
                await dbSql.deleteHourReport(ZB_ADDR);  //보고서 삭제
                await dbSql.deleteSwEvent(ZB_ADDR);     //스위치 변경이력 
                await dbSql.deleteControl(ZB_ADDR);     //제어이력 삭제                
                await dbSql.deleteDevice(ZB_ADDR);      //플러그 삭제 
                
                let CMD = "DEV_DEL";   
                let CMD_PARAM  = ZB_ADDR;
                await dbSql.insertCommand(CMD, CMD_PARAM);        //삭제전송 
                //res.send(new RES_PACKET());
                res.send(getRES_PACKET());
            }
            catch ( reason )
            {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            }            

        });        
        this.restApp.post('/devices/:ZB_ADDR', (req, res) => {   //플러그 정보수정 
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;
                        
            let ZB_ADDR = req.param('ZB_ADDR', '');
            
            delete req.body["SW_ST"];       //업데이트 되면 안되는 항목들 
            delete req.body["KW"];
            delete req.body["AKWH"];
            delete req.body["RCV_DT"];
            delete req.body["RCV_TM"];
            delete req.body["BIGO"];
            delete req.body["REG_DTIME"];

            
            delete req.body["ZB_RGRP_AID"];
            delete req.body["ZB_ONGRP_AID"];
            delete req.body["ZB_OFFGRP_AID"];
            delete req.body["ZB_RGRP_RID"];
            delete req.body["ZB_ONGRP_RID"];
            delete req.body["ZB_OFFGRP_RID"];

            if( req.body["MANU_CTL_ALLOW"] == 0 ) {   //전체제어 허용여부 {허용안하는경우 ON/OFF Zigbee그룹에서 제외 }
                req.body["ZB_ONGRP_AID"] = 0;
                req.body["ZB_OFFGRP_AID"] = 0;
            }
        
            if( req.body["OFF_DELY"] > 0 )    //OFF지연값 설정시 OFF Zigbee그룹에서 제외
            {
                req.body["ZB_OFFGRP_AID"] = 0;
            }
            
            dbSql.updateDevice(req.body, ZB_ADDR).then((result) => {                
                    res.send(getRES_PACKET());
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            });
        });
       


        this.restApp.get('/groups', (req, res) => {             //그룹 목록 조회
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            dbSql.selectGroups().then((rows) => {
                res.send(_this.makeDataRespons(rows));
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            });
        });
        this.restApp.post('/groups', (req, res) => {             //그룹 신규등록 
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let GRP_SQ = req.param('GRP_SQ', '');
            dbSql.insertGroup(req.body).then((result) => {                
                //res.send(new RES_PACKET());
                res.send(getRES_PACKET());
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            });
        });
        this.restApp.get('/groups/:GRP_SQ', (req, res) => {   //그룹 개별조회
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let GRP_SQ = req.param('GRP_SQ', '');
            dbSql.selectGroup(GRP_SQ).then((rows) => {
                res.send(_this.makeDataRespons(rows, true));
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            });
        });
        this.restApp.delete('/groups/:GRP_SQ', async (req, res) => {   //그룹 삭제
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;


            let GRP_SQ = req.param('GRP_SQ', '');
            try
            {
                // let grpRows = await dbSql.selectDevicesByGroup(GRP_SQ);
                // if( grpRows & grpRows.length >  0 )                 
                //     throw new Error("그룹에 속한 플러그가 있습니다.");

                // let schRows = await dbSql.selectScheduleByGroup(GRP_SQ);
                // if( schRows & schRows.length >  0 ) 
                //     throw new Error("그룹에 스케쥴이 설정되어 있습니다."); 

                //let devRows = await dbSql.selectDevicesByGroup(GRP_SQ);
                //if( devRows & devRows.length >  0 )

                await dbSql.updateDeviceGroupNull(GRP_SQ);      //플러그  그룹정보 NULL

                let schRows = await dbSql.selectScheduleByGroup(GRP_SQ);
                for ( let schRow of schRows )
                {
                    await dbSql.deleteScheduleTimeBySchdSq( schRow.SCHD_SQ );       //시간 스케쥴 정보 삭제 
                }         

                await dbSql.deleteScheduleByGroup(GRP_SQ);                          //일 스케쥴 삭제

                await dbSql.deleteGroup(GRP_SQ);                                    // 그룹 삭제 
                
                //res.send(new RES_PACKET());
                res.send(getRES_PACKET());
            }
            catch ( reason )
            {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            }            
        }); 
        this.restApp.post('/groups/:GRP_SQ', (req, res) => {   //그룹 정보수정 
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let GRP_SQ = req.param('GRP_SQ', '');
            dbSql.updateGroup(req.body, GRP_SQ).then((result) => {                
                    //res.send(new RES_PACKET());
                    res.send(getRES_PACKET());
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            });
        });



        this.restApp.get('/devices/:ZB_ADDR/on', async (req, res) => {   //플러그 ON 제어 
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let ZB_ADDR = req.param('ZB_ADDR', '');

            let controlObj = {
                ZB_ADDR:ZB_ADDR,    //지그비주소(IEEE-64BIT ADDR)
                GRP_SQ : null,      //그룹일련번호(그룹제어일경우 Not Null)
                CTL_TYPE : 1,       //제어구분(1:수동제어,2:스케줄제어) 
                CTL_OBJ : 1 ,       //제어대상구분(1:개별제어,2:그룹제어, 3:전체제어) 
                CTL_CMD : 1,        //제어명령(0:OFF,1:ON)
                SCHD_TM_SQ:null,    //스케쥴시간 일련번호
                SCHD_SQ:null        //스케쥴일련번호                
            };


            try
            {
                let effCnt  = await dbSql.insertControl(controlObj);
                let devRows = await dbSql.selectDevice(ZB_ADDR);

                let result = await this.filterOnControlDev(devRows, "each");

                let manuFilterMsg = "";
                if( result.maun_ctl_allow_filter.length > 0 )
                    manuFilterMsg = `수동제어 불가(${result.maun_ctl_allow_filter.length})`;

                if( result.direct_control.length <= 0 )
                {
                    //res.send(new RES_PACKET(0, `ON제어할 기기를 찾지 못했습니다. ${manuFilterMsg}, `, result));
                    res.send(getRES_PACKET(0, `ON제어할 기기를 찾지 못했습니다. ${manuFilterMsg}, `, result));
                    return; 
                }


                let CMD_PARAM = "";                
                for (let ZB_ADDR of result.direct_control) {                                      

                    if( CMD_PARAM === "" )  CMD_PARAM += `${ZB_ADDR}`;
                    else                    CMD_PARAM += `,${ZB_ADDR}`;
                }
                
                await dbSql.insertCommand('ON', CMD_PARAM);        //즉시제어 


                let totControlCnt = result.direct_control.length ;        //제어된 갯수 
                let totExceptCnt  = result.maun_ctl_allow_filter.length   //예외된 갯수

                //res.send(new RES_PACKET(0, `${totControlCnt}개의 기기를 ON하였습니다. 예외기기=${totExceptCnt}`, result));
                res.send(getRES_PACKET(0, `${totControlCnt}개의 기기를 ON하였습니다. 예외기기=${totExceptCnt}`, result));
            }
            catch ( reason )
            {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            }
        });
     
        this.restApp.get('/groups/:GRP_SQ/on', async (req, res) => {   //그룹 ON 제어 
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let GRP_SQ = req.param('GRP_SQ', '');
            let controlObj = {
                ZB_ADDR: null,     //지그비주소(IEEE-64BIT ADDR)
                GRP_SQ : GRP_SQ,    //그룹일련번호(그룹제어일경우 Not Null)
                CTL_TYPE : 1,       //제어구분(1:수동제어,2:스케줄제어) 
                CTL_OBJ : 2 ,       //제어대상구분(1:개별제어,2:그룹제어, 3:전체제어) 
                CTL_CMD : 1,        //제어명령(0:OFF,1:ON)
                SCHD_TM_SQ:null,    //스케쥴시간 일련번호
                SCHD_SQ:null        //스케쥴일련번호                
            };


            try
            {
                let effCnt  = await dbSql.insertControl(controlObj);
                let devRows = await dbSql.selectDevicesByGroup(GRP_SQ);

                let result = await this.filterOnControlDev(devRows, "group");

                let manuFilterMsg = "";
                if( result.maun_ctl_allow_filter.length > 0 )
                    manuFilterMsg = `수동제어 불가(${result.maun_ctl_allow_filter.length})`;

                if( result.direct_control.length <= 0 )
                {
                    //res.send(new RES_PACKET(0, `ON제어 가능한 기기를 찾지 못했습니다. ${manuFilterMsg}`, result));
                    res.send(getRES_PACKET(0, `ON제어 가능한 기기를 찾지 못했습니다. ${manuFilterMsg}`, result));
                    return; 
                }

                let CMD_PARAM = "";                
                for (let ZB_ADDR of result.direct_control) {                                      

                    if( CMD_PARAM === "" )  CMD_PARAM += `${ZB_ADDR}`;
                    else                    CMD_PARAM += `,${ZB_ADDR}`;
                }
                
                await dbSql.insertCommand('ON', CMD_PARAM);                 //즉시제어 

                let totControlCnt = result.direct_control.length ;          //제어된 갯수 
                let totExceptCnt  = result.maun_ctl_allow_filter.length     //예외된 갯수

                //res.send(new RES_PACKET(0, `${totControlCnt}개의 기기를 ON하였습니다. 예외기기=${totExceptCnt}`, result));
                res.send( getRES_PACKET(0, `${totControlCnt}개의 기기를 ON하였습니다. 예외기기=${totExceptCnt}`, result));
            }
            catch ( reason )
            {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            }
        });

        
        // Zigbee Group  적용전 전체제어 
        // this.restApp.get('/all/on', async (req, res) => {   //전체 ON 제어 
        //     DEBUG && console.log(req.method, req.originalUrl); let _this = this;

        //     let controlObj = {
        //         ZB_ADDR:null,       //지그비주소(IEEE-64BIT ADDR)
        //         GRP_SQ:null,        //그룹일련번호(그룹제어일경우 Not Null)
        //         CTL_TYPE : 1,       //제어구분(1:수동제어,2:스케줄제어) 
        //         CTL_OBJ : 3 ,       //제어대상구분(1:개별제,2:그룹제어, 3:전체제어) 
        //         CTL_CMD : 1,        //제어명령(0:OFF,1:ON)
        //         SCHD_TM_SQ:null,    //스케쥴시간 일련번호
        //         SCHD_SQ:null        //스케쥴일련번호                
        //     };

        //     try
        //     {
        //         let effCnt  = await dbSql.insertControl(controlObj);
        //         let devRows = await dbSql.selectDevices();

        //         let result = await this.filterOnControlDev(devRows, "all");

        //         let manuFilterMsg = "";
        //         if( result.maun_ctl_allow_filter.length > 0 )
        //             manuFilterMsg = `수동제어 불가(${result.maun_ctl_allow_filter.length})`;

        //         if( result.direct_control.length <= 0 )
        //         {
        //             //res.send(new RES_PACKET(0, `ON제어 가능한 기기를 찾지 못했습니다. ${manuFilterMsg}, `, result));
        //             res.send( getRES_PACKET(0, `ON제어 가능한 기기를 찾지 못했습니다. ${manuFilterMsg}, `, result));
        //             return; 
        //         }

        //         let CMD_PARAM = "";                
        //         for (let ZB_ADDR of result.direct_control) {                                      

        //             if( CMD_PARAM === "" )  CMD_PARAM += `${ZB_ADDR}`;
        //             else                    CMD_PARAM += `,${ZB_ADDR}`;
        //         }
                
        //         await dbSql.insertCommand('ON', CMD_PARAM);        //즉시제어 

        //         let totControlCnt = result.direct_control.length ;        //제어된 갯수 
        //         let totExceptCnt  = result.maun_ctl_allow_filter.length   //예외된 갯수

        //         //res.send(new RES_PACKET(0, `${totControlCnt}개의 기기를 ON하였습니다. 예외기기=${totExceptCnt}`, result));
        //         res.send(getRES_PACKET(0, `${totControlCnt}개의 기기를 ON하였습니다. 예외기기=${totExceptCnt}`, result));                
        //     }
        //     catch ( reason )
        //     {
        //         console.error(reason.message);
        //         res.send(_this.makeErrorResponse(1, reason));
        //     }  
        // });


        //Zigbee 그룹을 이용한 전체 ON 제어 
        this.restApp.get('/all/on', async (req, res) => {   //전체 ON 제어 
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let controlObj = {
                ZB_ADDR:null,       //지그비주소(IEEE-64BIT ADDR)
                GRP_SQ:null,        //그룹일련번호(그룹제어일경우 Not Null)
                CTL_TYPE : 1,       //제어구분(1:수동제어,2:스케줄제어) 
                CTL_OBJ : 3 ,       //제어대상구분(1:개별제,2:그룹제어, 3:전체제어) 
                CTL_CMD : 1,        //제어명령(0:OFF,1:ON)
                SCHD_TM_SQ:null,    //스케쥴시간 일련번호
                SCHD_SQ:null        //스케쥴일련번호                
            };

            try
            {
                let effCnt  = await dbSql.insertControl(controlObj);    //명령기록 
                                
                let onGroupRows = await dbSql.selectZbOnGroup();   //ON Group 
                for ( let group of onGroupRows )
                {                
                    let ZB_ONGRP_RID = group['ZB_ONGRP_RID'];                    
                    let ctl_param = `{"cmd_mode":1, "id" : ${ ZB_ONGRP_RID }, "status":1}`;   
                    await dbSql.insertCommand('CTL', ctl_param);        //즉시제어 
                }


                if( onGroupRows.length <= 0 )
                {                    
                    res.send( getRES_PACKET(0, `Zigbee ON Group을 찾지 못했습니다.`));
                    return; 
                }                
                
                res.send(getRES_PACKET(0, `${onGroupRows.length }개의 Zigbee ON그룹을 ON하였습니다.`)); 
            }
            catch ( reason )
            {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            }  
        });



        this.restApp.get('/devices/:ZB_ADDR/off', async (req, res) => {   //플러그 OFF 제어 
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let ZB_ADDR = req.param('ZB_ADDR', '');
            let FILTER  = req.param('FILTER', '');      //대기전력 무시 여부

            let controlObj = {
                ZB_ADDR:ZB_ADDR,    //지그비주소(IEEE-64BIT ADDR)
                GRP_SQ : null,      //그룹일련번호(그룹제어일경우 Not Null)
                CTL_TYPE : 1,       //제어구분(1:수동제어,2:스케줄제어) 
                CTL_OBJ : 1 ,       //제어대상구분(1:개별제어,2:그룹제어, 3:전체제어) 
                CTL_CMD : 0,        //제어명령(0:OFF,1:ON)
                SCHD_TM_SQ:null,    //스케쥴시간 일련번호
                SCHD_SQ:null        //스케쥴일련번호                
            };


            try
            {
                let effCnt  = await dbSql.insertControl(controlObj);
                let devRows = await dbSql.selectDevice(ZB_ADDR);

                let result = await this.filterOffControlDev(devRows, FILTER, "each");

                let manuFilterMsg = "";
                if( result.maun_ctl_allow_filter.length > 0 )
                    manuFilterMsg = `수동제어 불가(${result.maun_ctl_allow_filter.length})`;
                
                let useKwFilterMsg = "";
                if( result.use_kw_filter.length > 0 )
                    useKwFilterMsg = `사용중(${result.use_kw_filter.length})`;
                
                if( result.direct_control.length <= 0 && result.reserv_control.length <= 0 )
                {
                    //res.send(new RES_PACKET(0, `OFF 가능한 기기가 아닙니다. ${useKwFilterMsg},${manuFilterMsg}`, result));
                    res.send(getRES_PACKET(0, `OFF 가능한 기기가 아닙니다. ${useKwFilterMsg},${manuFilterMsg}`, result));
                    return; 
                }


                let CMD_PARAM = "";                
                for (let ZB_ADDR of result.direct_control) {                                      

                    if( CMD_PARAM === "" )  CMD_PARAM += `${ZB_ADDR}`;
                    else                    CMD_PARAM += `,${ZB_ADDR}`;
                }
                if(result.direct_control.length > 0 )
                    await dbSql.insertCommand('OFF', CMD_PARAM);        //즉시제어 
                    
                for (let aResv of result.reserv_control) {                                      
                    await dbSql.insertCommandReserv('OFF', aResv.ZB_ADDR, aResv.RSV_DT, aResv.RSV_TM ); 
                }

                let totControlCnt = result.direct_control.length + result.reserv_control.length;        //제어된 갯수 
                let totExceptCnt  = result.maun_ctl_allow_filter.length + result.use_kw_filter.length;  //예외된 갯수(수동제어불허, 대기전력 체크)

                //res.send(new RES_PACKET(0, `${totControlCnt}개의 기기를 OFF 하였습니다. 예외기기=${totExceptCnt}`, result));
                res.send(getRES_PACKET(0, `${totControlCnt}개의 기기를 OFF 하였습니다. 예외기기=${totExceptCnt}`, result));
            }
            catch ( reason )
            {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            }
        });

        this.restApp.get('/groups/:GRP_SQ/off', async (req, res) => {   //그룹 OFF 제어 
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let GRP_SQ  = req.param('GRP_SQ', '');
            let FILTER  = req.param('FILTER', '');  //y or n

            let controlObj = {
                ZB_ADDR: null,      //지그비주소(IEEE-64BIT ADDR)
                GRP_SQ : GRP_SQ,    //그룹일련번호(그룹제어일경우 Not Null)
                CTL_TYPE : 1,       //제어구분(1:수동제어,2:스케줄제어) 
                CTL_OBJ : 2 ,       //제어대상구분(1:개별제어,2:그룹제어, 3:전체제어) 
                CTL_CMD : 0,        //제어명령(0:OFF,1:ON)
                SCHD_TM_SQ:null,    //스케쥴시간 일련번호
                SCHD_SQ:null        //스케쥴일련번호                
            };

            try
            {
                let effCnt  = await dbSql.insertControl(controlObj);
                let devRows = await dbSql.selectDevicesByGroup(GRP_SQ);

                let result = await this.filterOffControlDev(devRows, FILTER, "group");

                let manuFilterMsg = "";
                if( result.maun_ctl_allow_filter.length > 0 )
                    manuFilterMsg = `수동제어 불가(${result.maun_ctl_allow_filter.length})`;
                
                let useKwFilterMsg = "";
                if( result.use_kw_filter.length > 0 )
                    useKwFilterMsg = `사용중(${result.use_kw_filter.length})`;
                
                if( result.direct_control.length <= 0 && result.reserv_control.length <= 0 )
                {
                    //res.send(new RES_PACKET(0, `OFF 가능한 기기를 찾지 못했습니다. ${useKwFilterMsg},${manuFilterMsg}`, result));
                    res.send( getRES_PACKET(0, `OFF 가능한 기기를 찾지 못했습니다. ${useKwFilterMsg},${manuFilterMsg}`, result));
                    return; 
                }



                let CMD_PARAM = "";                
                for (let ZB_ADDR of result.direct_control) {                                      

                    if( CMD_PARAM === "" )  CMD_PARAM += `${ZB_ADDR}`;
                    else                    CMD_PARAM += `,${ZB_ADDR}`;
                }

                if(result.direct_control.length > 0 )
                    await dbSql.insertCommand('OFF', CMD_PARAM);        //즉시제어 
                    
                for (let aResv of result.reserv_control) {                                      
                    await dbSql.insertCommandReserv('OFF', aResv.ZB_ADDR, aResv.RSV_DT, aResv.RSV_TM ); 
                }

                let totControlCnt = result.direct_control.length + result.reserv_control.length;        //제어된 갯수 
                let totExceptCnt  = result.maun_ctl_allow_filter.length + result.use_kw_filter.length; //예외된 갯수
 
                //res.send(new RES_PACKET(0, `${totControlCnt}개의 기기를 OFF 하였습니다. 예외기기=${totExceptCnt}`, result));
                res.send( getRES_PACKET(0, `${totControlCnt}개의 기기를 OFF 하였습니다. 예외기기=${totExceptCnt}`, result));
            }
            catch ( reason )
            {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            }           
        });


        

        // this.restApp.get('/all/off', async (req, res) => {   //전체 OFF 제어 
        //     DEBUG && console.log(req.method, req.originalUrl); let _this = this;

        //     let FILTER  = req.param('FILTER', '');  //y or n
           
        //     let controlObj = {
        //         ZB_ADDR:null,       //지그비주소(IEEE-64BIT ADDR)
        //         GRP_SQ:null,        //그룹일련번호(그룹제어일경우 Not Null)
        //         CTL_TYPE : 1,       //제어구분(1:수동제어,2:스케줄제어) 
        //         CTL_OBJ : 3 ,       //제어대상구분(1:개별제,2:그룹제어, 3:전체제어) 
        //         CTL_CMD : 0,        //제어명령(0:OFF,1:ON)
        //         SCHD_TM_SQ:null,    //스케쥴시간 일련번호
        //         SCHD_SQ:null        //스케쥴일련번호                
        //     };


        //     try
        //     {
        //         let effCnt  = await dbSql.insertControl(controlObj);
        //         let devRows = await dbSql.selectDevices();

        //         let result = await this.filterOffControlDev(devRows, FILTER, "all");

        //         let manuFilterMsg = "";
        //         if( result.maun_ctl_allow_filter.length > 0 )
        //             manuFilterMsg = `수동제어 불가(${result.maun_ctl_allow_filter.length})`;
                
        //         let useKwFilterMsg = "";
        //         if( result.use_kw_filter.length > 0 )
        //             useKwFilterMsg = `사용중(${result.use_kw_filter.length})`;
                
        //         if( result.direct_control.length <= 0 && result.reserv_control.length <= 0 )
        //         {
        //             //res.send(new RES_PACKET(0, `OFF 가능한 기기를 찾지 못했습니다. ${useKwFilterMsg},${manuFilterMsg}`, result));
        //             return; 
        //         }


        //         let CMD_PARAM = "";                
        //         for (let ZB_ADDR of result.direct_control) {                                      

        //             if( CMD_PARAM === "" )  CMD_PARAM += `${ZB_ADDR}`;
        //             else                    CMD_PARAM += `,${ZB_ADDR}`;
        //         }


        //         if(result.direct_control.length > 0 )
        //             await dbSql.insertCommand('OFF', CMD_PARAM);        //즉시제어 
                    
        //         for (let aResv of result.reserv_control) {                                      
        //             await dbSql.insertCommandReserv('OFF', aResv.ZB_ADDR, aResv.RSV_DT, aResv.RSV_TM ); 
        //         }

        //         let totControlCnt = result.direct_control.length + result.reserv_control.length;        //제어된 갯수 
        //         let totExceptCnt  = result.maun_ctl_allow_filter.length + result.use_kw_filter.length; //예외된 갯수

        //         //res.send(new RES_PACKET(0, `${totControlCnt}개의 기기를 OFF 하였습니다. 예외기기=${totExceptCnt}`, result));
        //         res.send(getRES_PACKET(0, `${totControlCnt}개의 기기를 OFF 하였습니다. 예외기기=${totExceptCnt}`, result));
        //     }
        //     catch ( reason )
        //     {
        //         console.error(reason.message);
        //         res.send(_this.makeErrorResponse(1, reason));
        //     }
        // });


        //Zigbee Group 을 이용한 전체 OFF제어 
        this.restApp.get('/all/off', async (req, res) => {   //전체 OFF 제어 
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let FILTER  = req.param('FILTER', 'n');  //y or n (기준전력 필터 안함)
           
            let controlObj = {
                ZB_ADDR:null,       //지그비주소(IEEE-64BIT ADDR)
                GRP_SQ:null,        //그룹일련번호(그룹제어일경우 Not Null)
                CTL_TYPE : 1,       //제어구분(1:수동제어,2:스케줄제어) 
                CTL_OBJ : 3 ,       //제어대상구분(1:개별제,2:그룹제어, 3:전체제어) 
                CTL_CMD : 0,        //제어명령(0:OFF,1:ON)
                SCHD_TM_SQ:null,    //스케쥴시간 일련번호
                SCHD_SQ:null        //스케쥴일련번호                
            };


            try
            {
                let effCnt  = await dbSql.insertControl(controlObj);
                let devRows = await dbSql.selectDevices();

                let result = await this.filterOffControlDev(devRows, FILTER, "all");

                let manuFilterMsg = "";
                if( result.maun_ctl_allow_filter.length > 0 )
                    manuFilterMsg = `수동제어 불가(${result.maun_ctl_allow_filter.length})`;
                
                let useKwFilterMsg = "";
                if( result.use_kw_filter.length > 0 )
                    useKwFilterMsg = `사용중(${result.use_kw_filter.length})`;
                
              

                //즉시제어 (Zigbee 그룹으로 즉시제어 )
                let offGroupRows = await dbSql.selectZbOffGroup();   //Off Group 
                for ( let group of offGroupRows )
                {                
                    let ZB_OFFGRP_RID = group['ZB_OFFGRP_RID'];                    
                    let ctl_param = `{"cmd_mode":1, "id" : ${ZB_OFFGRP_RID}, "status":0}`;   
                    await dbSql.insertCommand('CTL', ctl_param);        //즉시제어 
                }
                if( offGroupRows.length <= 0 )
                {                    
                    res.send( getRES_PACKET(0, `Zigbee OFF Group을 찾지 못했습니다.`));
                    return; 
                }               

                //지연 OFF제어 플러그 
                for (let aResv of result.reserv_control) {                                      
                    await dbSql.insertCommandReserv('OFF', aResv.ZB_ADDR, aResv.RSV_DT, aResv.RSV_TM ); 
                }

                res.send(getRES_PACKET(0, `${offGroupRows.length }개의 Zigbee OFF그룹을 OFF하였습니다.`)); 

            }
            catch ( reason )
            {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            }
        });



        this.restApp.get('/holidays', (req, res) => {             //휴일 목록조회
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;
            
            let YYYYMM = req.param('YYYYMM', '');
            
            dbSql.selectHolidays(YYYYMM).then((rows) => {
                res.send(_this.makeDataRespons(rows));
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorRespose(1, reason));
            });
        });

        this.restApp.get('/holidays/:HOLI_DT', (req, res) => {   //휴일 개별조회
            DEBUG && console.log(req.method, req.originalUrl); let _this = this; 
            
            let HOLI_DT = req.param('HOLI_DT', '');
            dbSql.selectHoliday(HOLI_DT).then((rows) => {                
                res.send(_this.makeDataRespons(rows, true));
            }).catch(function (reason) {      
                console.error(reason.message);          
                res.send(_this.makeErrorResponse(1, reason));
            });
        });
        this.restApp.post('/holidays', (req, res) => {             //휴일 등록
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            dbSql.insertHoliday(req.body).then((result) => {
                //res.send(new RES_PACKET());
                res.send(getRES_PACKET());
            }).catch(function (reason) {
                res.send(_this.makeErrorRespose(1, reason));
            });
        });
        this.restApp.delete('/holidays/:HOLI_DT', (req, res) => {   //휴일 삭제
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let HOLI_DT = req.param('HOLI_DT', '');
                        
            dbSql.deleteHoliday(HOLI_DT).then((result) => {   //휴일 삭제             
                //res.send(new RES_PACKET());
                res.send(getRES_PACKET());
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            });
        });        
        this.restApp.post('/holidays/:HOLI_DT', (req, res) => {   //휴일 정보수정 
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let HOLI_DT = req.param('HOLI_DT', '');
            dbSql.updateHoliday(req.body, HOLI_DT).then((result) => {                
                    //res.send(new RES_PACKET());
                res.send(getRES_PACKET());
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            });
        });




        
        this.restApp.get('/autodev_schedules', (req, res) => {      //금일 운전될 자동화기기 설정 내용 
            DEBUG &&  console.log(req.method, req.originalUrl); let _this = this;
                                    
            dbSql.selectAutoDeviceScheduleTime().then((rows) => {
                res.send(_this.makeDataRespons(rows));
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorRespose(1, reason));
            });
        });
        this.restApp.get('/schedules', (req, res) => {             //스케쥴 목록조회
            DEBUG &&  console.log(req.method, req.originalUrl); let _this = this;
                                    
            
            dbSql.selectSchedules().then((rows) => {            
                res.send(_this.makeDataRespons(rows));
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorRespose(1, reason));
            });
        });
        this.restApp.get('/schedules/:SCHD_SQ', (req, res) => {   //스케쥴 개별조회
            DEBUG && console.log(req.method, req.originalUrl); let _this = this; 
            
            let SCHD_SQ = req.param('SCHD_SQ', '');
            dbSql.selectSchedule(SCHD_SQ).then((rows) => {                
                res.send(_this.makeDataRespons(rows, true));
            }).catch(function (reason) {  
                console.error(reason.message);              
                res.send(_this.makeErrorResponse(1, reason));
            });
        });
        this.restApp.post('/schedules', (req, res) => {             //스케쥴 등록
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            dbSql.insertSchedule(req.body).then((result) => {
                //res.send(new RES_PACKET());
                res.send(getRES_PACKET());
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorRespose(1, reason));
            });
        });
        this.restApp.delete('/schedules/:SCHD_SQ', async (req, res) => {   //스케쥴 삭제
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let SCHD_SQ = req.param('SCHD_SQ', '');

            try{
                await dbSql.deleteScheduleTimeBySchdSq( SCHD_SQ );       //시간 스케쥴 정보 삭제 

                await dbSql.deleteSchedule(SCHD_SQ);                      //일 스케쥴 삭제

                //res.send(new RES_PACKET());
                res.send(getRES_PACKET());
            }
            catch ( reason )
            {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            }
        });        
        this.restApp.post('/schedules/:SCHD_SQ', (req, res) => {   //스케쥴 정보수정 
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let SCHD_SQ = req.param('SCHD_SQ', '');
            dbSql.updateSchedule(req.body, SCHD_SQ).then((result) => {                
                    //res.send(new RES_PACKET());
                res.send(getRES_PACKET());
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            });
        });






        this.restApp.get('/schedules_times', (req, res) => {             //스케쥴시간  목록조회
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;
                                    
            dbSql.selectScheduleTimes().then((rows) => {
                res.send(_this.makeDataRespons(rows));
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorRespose(1, reason));
            });
        });
        this.restApp.get('/schedules_times/:SCHD_TM_SQ', (req, res) => {   //스케쥴시간  개별조회
            DEBUG && console.log(req.method, req.originalUrl); let _this = this; 
            
            let SCHD_TM_SQ = req.param('SCHD_TM_SQ', '');
            dbSql.selectScheduleTime(SCHD_TM_SQ).then((rows) => {                
                res.send(_this.makeDataRespons(rows, true));
            }).catch(function (reason) {         
                console.error(reason.message);       
                res.send(_this.makeErrorResponse(1, reason));
            });
        });
        this.restApp.post('/schedules_times', (req, res) => {             //스케쥴시간  등록
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            dbSql.insertScheduleTime(req.body).then((result) => {
                //res.send(new RES_PACKET());
                res.send(getRES_PACKET());
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorRespose(1, reason));
            });
        });
        this.restApp.delete('/schedules_times/:SCHD_TM_SQ', (req, res) => {   //스케쥴시간  삭제
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let SCHD_TM_SQ = req.param('SCHD_TM_SQ', '');
                        
            dbSql.deleteScheduleTime(SCHD_TM_SQ).then((result) => {   
                //res.send(new RES_PACKET());
                res.send(getRES_PACKET());
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            });
        });        
        this.restApp.post('/schedules_times/:SCHD_TM_SQ', (req, res) => {   //스케쥴시간  정보수정 
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let SCHD_TM_SQ = req.param('SCHD_TM_SQ', '');
            dbSql.updateScheduleTime(req.body, SCHD_TM_SQ).then((result) => {                
                    //res.send(new RES_PACKET());
                res.send(getRES_PACKET());
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            });
        });


        //=======================================================================
        // 스케쥴 일자 정보 및 시간정보 동시 처리 
        //
        //=======================================================================
        this.restApp.get('/schedule_once', (req, res) => {             //스케쥴 조회
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;
                                    
            dbSql.selectScheduleTimes().then((rows) => {
                res.send(_this.makeDataRespons(rows));
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorRespose(1, reason));
            });
        });
        //한번에 스케쥴 일자정보, 시간정보 한번에 삭제 (1:1)
        this.restApp.delete('/schedule_once/:SCHD_SQ', async (req, res) => {   //스케쥴 삭제 
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let SCHD_SQ = req.param('SCHD_SQ', '');

            try{
                await dbSql.deleteScheduleTimeBySchdSq( SCHD_SQ );       //시간 스케쥴 정보 삭제 

                await dbSql.deleteSchedule(SCHD_SQ);                      //일 스케쥴 삭제

                //res.send(new RES_PACKET());
                res.send(getRES_PACKET());
            }
            catch ( reason )
            {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            }
        });        

        //한번에 스케쥴 일자정보, 시간정보 한번에 등록 (1:1)
        this.restApp.post('/schedule_once', async (req, res) => {   //스케쥴 삭제
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            try{            
                let result =  await dbSql.insertSchedule(req.body);     //일자스케쥴 정보 등록 
                req.body["SCHD_SQ"] =  result["lastID"];
                dbSql.insertScheduleTime(req.body)
                
                //res.send(new RES_PACKET());
                res.send(getRES_PACKET());
            }
            catch ( reason )
            {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            }
        });                



        //일보고서 조회 
        this.restApp.get('/report_day', (req, res) => {             
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let frDate = req.param('FR_DATE', xpUtils.getCurDate() );
            let toDate = req.param('TO_DATE', xpUtils.getCurDate());
            let offset = 0;
           
            dbSql.selectDayReportFromTo(frDate, toDate, offset).then((rows) => {
                res.send(_this.makeDataRespons(rows));
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            });
        });



        //시간 보고서 조회 
        this.restApp.get('/report_hour', (req, res) => {             //스케쥴 목록조회
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

            let frDate = req.param('FR_DATE', xpUtils.getCurDate() );
            let toDate = req.param('TO_DATE', xpUtils.getCurDate());
            let offset = 0;
            
            dbSql.selectHourReportFromTo(frDate, toDate, offset).then((rows) => {
                res.send(_this.makeDataRespons(rows));
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            });
        });



        //종합 월 보고서 조회 
        this.restApp.get('/report_mon/total', (req, res) => {
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;
        
            let cDate = new Date() ;
            let pDate = new Date().setDate(0);

            let frDate = req.param('FR_MONTH', xpUtils.getYYYYMM( pDate ) );
            let toDate = req.param('TO_MONTH', xpUtils.getYYYYMM( cDate ));
            let offset = 0;
            
            dbSql.selectMonthReportFromToAtTotal(frDate, toDate, offset).then((rows) => {
                res.send(_this.makeDataRespons(rows));
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            });
        });


         //종합 일보고서 조회 
         this.restApp.get('/report_day/total', (req, res) => {             //스케쥴 목록조회
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;
     
            let frDate = req.param('FR_DATE', xpUtils.getCurDate() );
            let toDate = req.param('TO_DATE', xpUtils.getCurDate());
            let offset = 0;
           
            dbSql.selectDayReportFromToAtTotal(frDate, toDate, offset).then((rows) => {
                res.send(_this.makeDataRespons(rows));
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            });
        });




        //종합 시간 보고서 조회 
        this.restApp.get('/report_hour/total', (req, res) => {             //스케쥴 목록조회
            DEBUG && console.log(req.method, req.originalUrl); let _this = this;

    
            let frDate = req.param('FR_DATE', xpUtils.getCurDate() );
            let toDate = req.param('TO_DATE', xpUtils.getCurDate());
            let offset = 0;
            
            dbSql.selectHourReportFromToAtTotal(frDate, toDate, offset).then((rows) => {
                res.send(_this.makeDataRespons(rows));
            }).catch(function (reason) {
                console.error(reason.message);
                res.send(_this.makeErrorResponse(1, reason));
            });
        });
    },
    async filterOffControlDev( devRows , filter, ctl_kind="all" )       //수동 OFF시 제어 대상 기기  검색 
    {
        let rtnResult =  {
            maun_ctl_allow_filter : [],
            use_kw_filter : [],    
            direct_control : [],            
            reserv_control : [],           
        };
        
        if( typeof devRows !== 'object' && devRows.length <= 0 ) 
            return rtnResult;

        for (let row of devRows) {

            if( ctl_kind == "all" && row.MANU_CTL_ALLOW !== 1 )              //전체제어  허용여부 체크 
            {
                DEBUG && console.log( `${row.ZB_ADDR} can not off because manual control not allow` );
                rtnResult.maun_ctl_allow_filter.push(row.ZB_ADDR);
                continue;
            }

            if( row.DEV_ST !== 1 )              //통신상태 체크
            {
                console.log( `${row.ZB_ADDR} can not off because com stat error` );
                rtnResult.maun_ctl_allow_filter.push(row.ZB_ADDR);
                continue;
            }
           

            if( filter === 'y' ||  filter === '' )     //기준 대기전력 체크 
            {
                if( typeof row.STBY_KW === "number" && typeof row.KW === "number" && row.STBY_KW > 0 && row.KW > 0 )    //현재 순시전력이 뜨고 대기전력 기준이 있다면 비교
                {
                    if( row.KW > row.STBY_KW )
                    {
                        DEBUG && console.log( `${row.ZB_ADDR} can not off because using KW(${row.KW}) > STBY_KW(${row.STBY_KW})` );
                        rtnResult.use_kw_filter.push(row.ZB_ADDR);
                        continue;
                    }                        
                }
            }

            if( typeof row.OFF_DELY === "number" && row.OFF_DELY > 0  )  {  //OFF 지연시간 

                let  cData = new Date();
                cData.setSeconds(cData.getSeconds() + row.OFF_DELY );

                let rsv_dt = xpUtils.getYYYYMMDD(cData);
                let rsv_tm = xpUtils.getHH24MISS(cData);

                rtnResult.reserv_control.push({ 
                    ZB_ADDR : row.ZB_ADDR, 
                    RSV_DT : rsv_dt, 
                    RSV_TM : rsv_tm
                    });
                
            } else {
                rtnResult.direct_control.push(row.ZB_ADDR);                
            }            
        }
        return rtnResult;
    },
    async filterOnControlDev( devRows, ctl_kind="all" )        //수동 ON시 제어 대상 기기  검색 
    {
        let rtnResult =  {
            maun_ctl_allow_filter : [],
            direct_control : []
        };
        
        if( typeof devRows !== 'object' && devRows.length <= 0 ) 
            return rtnResult;

        for (let row of devRows) {
            
            if( ctl_kind == "all" && row.MANU_CTL_ALLOW !== 1 )              //전체제어 전체제어 허용여부 체크 
            {
                console.log( `${row.ZB_ADDR} can not on because manual control not allow` );
                rtnResult.maun_ctl_allow_filter.push(row.ZB_ADDR);
                continue;
            }
            if( row.DEV_ST !== 1 )              //통신상태 체크
            {
                console.log( `${row.ZB_ADDR} can not on because com stat error` );
                rtnResult.maun_ctl_allow_filter.push(row.ZB_ADDR);
                continue;
            }
           
            rtnResult.direct_control.push(row.ZB_ADDR);                
           
        }
        return rtnResult;
    },
    start(port) {
        this.server = this.app.listen(port, () => {
            let host = this.server.address().address;
            let port = this.server.address().port;
            DEBUG &&  console.log("Web App listening at %s", port)
        });
    },
    makeDataRespons(rows, isSingleData = false) {
        //let resdata = new RES_PACKET();
        let resdata = getRES_PACKET();
        if (isSingleData) {
            if (rows && rows.length > 0)
                resdata.data = rows[0];
        }
        else {
            resdata.data = rows;
        }
        return resdata;
    },
    makeErrorResponse(rcd, rms) {
        //return new RES_PACKET(1, rms.message, rms );
        return getRES_PACKET(1, rms.message, rms );
    }
};
