const EventEmitter = require('events');
const util = require('util');
const dbSql = require('../database/db-sql');
const xpUtils = require("../utils/xg-datetime");

const mqttClient = require("../common-area").mqtt_adapter;

const DEBUG = false; 

let _this;

class ZbGroupThread extends EventEmitter
{
    constructor() 
    {
        super();
        _this  = this;
        this.mqttClient = mqttClient;
       
                
        /////////////////////// Zigbee Group ID 신규할당 /////////////////////
        this.setZbGroupidAssign();
        /////////////////////// Zigbee Group ID 신규할당 /////////////////////


        /////////////////////// Zigbee Group ID  플러그와 동기화 /////////////////////
        this.syncStat = 0;                  //0:End Sync, 1:Syning 
        this.syncingList = null;            //그룹 동기화중인 디바이스+그룹 목록   
        this.syncingListxCurIdx = 0;        //동기화 중인 Index
        
        this.syncMain();        
        /////////////////////// Zigbee Group ID  플러그와 동기화 /////////////////////



        ///////////////////////// Group View Schedule  /////////////////////
        this.viewGroupSchdStat = 0;           // 0:읽기완료, 1: 읽기중
        this.viewGroupSchdList = null;        // 스케쥴목록 
        this.viewGroupSchdListIdx = 0;        // 현재 읽기 실행중인 Index
        
        // this.viewGroupSchdMain(); 
        ///////////////////////// Group View Schedule  /////////////////////





        /////////////////////// Zigbee Group을 이용한 플러그 전체 제어후 상태 동기화 /////////////////////        
        this.syncPlugStat       = 0;        // 0:동기완료, 1:동기중 
        this.syncPlugStatList   = null;     // 스케쥴목록 
        this.syncPlugListIdx    = 0;        // 현재 읽기 실행중인 Index
        // this.syncPlugStatMain();                 

        /////////////////////// Zigbee Group을 이용한 플러그 전체 제어후 상태 동기화 /////////////////////
        dbSql.open();        
    }


        
    



    /////////////////////// Zigbee Group ID 부여할당 /////////////////////
    /////////////////////// Zigbee Group ID 부여할당 /////////////////////
    /**
     * Group ID 할당 
     * @param {*} GROUP_TYPE 
     */
    async getNextGroupidAssign( GROUP_TYPE ){
        
        let GROUP_NODE_CNT  = 0 ;
        let COLUMN = "";
        if( GROUP_TYPE == 'ON')
        {
            GROUP_NODE_CNT = 150;    //그룹당 노드갯수 
            COLUMN = 'ZB_ONGRP_AID';            
        }else if( GROUP_TYPE == 'OFF')
        {
            GROUP_NODE_CNT = 150;    //그룹당 노드갯수 
            COLUMN = 'ZB_OFFGRP_AID';            
        }else if( GROUP_TYPE == 'READ')
        {
            GROUP_NODE_CNT = 60;    //그룹당 노드갯수 
            COLUMN = 'ZB_RGRP_AID';            
        }else
        {
            return -1;
        }

        let row = await dbSql.selectDeviceForNextGroupAssign(COLUMN);            
        if( row == null || row === undefined || row.length <= 0) 
        {
            if( GROUP_TYPE == 'READ')
            {
                return 1001;   //최초 할당 
            }else if( GROUP_TYPE == 'ON')
            {
                return 2001;   //최초 할당 
            }else if( GROUP_TYPE == 'OFF')
            {
                return 3001;   //최초 할당 
            }            
        }

        if( row[0].CNT < GROUP_NODE_CNT) 
            return row[0][COLUMN]     //그룹아이디 재사용 (여유 있음 )
            
        return row[0][COLUMN] + 1;
    }    
    /**
     * Zigbee group id Assign (논리적 지그비 그룹핑(그룹아이디 부여함) )
     */
    async setZbGroupidAssign(){        
        
        try{    //On GROUP 
            let deviceRows = await dbSql.selectDevicesForOnGroupAssgin();   //On Group Assing ID 부여 대상 
            for ( let dev of deviceRows )
            {                
                let assginGroupId = await _this.getNextGroupidAssign( "ON" );
                if( assginGroupId <= 0 )
                {
                    DEBUG && console.error("get next group id fail", dev.ZB_ADDR, assginGroupId ); 
                    continue;
                }                                    
                await dbSql.updateOnGroupAssign(dev.ZB_ADDR, assginGroupId);            
            }
            console.info("New Group Assign ID Count : ", deviceRows.length );
        }catch  ( reason )
        {
            console.error(reason.message);            
        }

        
        try{    //Off GROUP 
            let deviceRows = await dbSql.selectDevicesForOffGroupAssgin();   //Off Group Assing ID 부여 대상 
            for ( let dev of deviceRows )
            {                
                let assginGroupId = await _this.getNextGroupidAssign( "OFF" );
                if( assginGroupId <= 0 )
                {
                    DEBUG && console.error("Get Next Group ID fail ", dev.ZB_ADDR, assginGroupId ); 
                    continue;
                }                                    
                await dbSql.updateOffGroupAssign(dev.ZB_ADDR, assginGroupId);            
            }
        }catch  ( reason )
        {
            console.error(reason.message);            
        }

        
        try{   //Read GROUP 
            let deviceRows = await dbSql.selectDevicesForReadGroupAssgin();   //Off Group Assing ID 부여 대상 
            for ( let dev of deviceRows )
            {                
                let assginGroupId = await _this.getNextGroupidAssign( "READ" );
                if( assginGroupId <= 0 )
                {
                    DEBUG && console.error("Get Next Group ID fail ", dev.ZB_ADDR, assginGroupId ); 
                    continue;
                }                                    
                await dbSql.updateReadGroupAssign(dev.ZB_ADDR, assginGroupId);            
            }
        }catch  ( reason )
        {
            console.error(reason.message);            
        }

        setTimeout( ()=>{ this.setZbGroupidAssign() } , 10000); //10초
    }




    


     /////////////////////// Zigbee Group ID  플러그와 동기화 ///////////////////// 
     /////////////////////// Zigbee Group ID  플러그와 동기화 ///////////////////// 
    async syncMain() {

        console.info("Zigbee Group ID sync with SmartPlug !!");
        
        if( this.syncStat == 0 ) //동기화중지 또는 완료상태 
        {
            await this.readDeviceForSync();
            
            setTimeout( ()=>{ this.syncMain() } , 3000);   //3초
        }
        else if( this.syncStat == 1 ) //동기화중 
        {
            await this.zbGroupSyncAndView();  //그룹동기화 및 그룹확인 

            setTimeout( ()=>{ this.syncMain() } , 3000);   //3초
        }        
        else
        {
            setTimeout( ()=>{ this.syncMain() } , 3000);   //3초
        }
        
    }

    /**
     * 동기화 대상 디비이스 목록 조회 
     * 
     */
    async readDeviceForSync() {                

        this.syncingList = null;
        this.syncingList = new Array();      //그룹 동기화중인 디바이스+그룹 목록         
        
        
        let arrAidColums = ['ZB_RGRP_AID', 'ZB_ONGRP_AID', 'ZB_OFFGRP_AID' ]
        let arrRidColums = ['ZB_RGRP_RID', 'ZB_ONGRP_RID', 'ZB_OFFGRP_RID' ]
        // let arrAidColums = ['ZB_ONGRP_AID', 'ZB_OFFGRP_AID' ]
        // let arrRidColums = ['ZB_ONGRP_RID', 'ZB_OFFGRP_RID' ]


        for ( let i = 0 ; i < arrAidColums.length; i++ )
        {
            try{
                let deviceRows = await dbSql.selectDevicesForSyncZBGroup( arrAidColums[i], arrRidColums[i] );   //Group 아이디 동기화 대상 
                for ( let dev of deviceRows )
                {                
                    let zb_addr = dev['ZB_ADDR'];
                    let cmd_mode  ; //명령종류[0:등록, 1:삭제, 2:조회(확인)]                    
                    let grp_id  ;

                    if( dev[ arrAidColums[i] ] == 0 || 
                        ( dev[ arrRidColums[i] ] > 0  && dev[ arrAidColums[i] ] != dev[ arrRidColums[i] ] ) )      //0으로 바꿨꺼나,  실제등록그룹 있으면서 요청과 현재아이디가  다른경우 --> 그룹삭제 
                    {
                        cmd_mode = 1;
                        grp_id = dev[ arrRidColums[i] ];

                        //동기화 삭제명령 추가 
                        this.syncingList.push(
                            {
                                cmd_mode : cmd_mode, 
                                zb_addr : zb_addr, 
                                grp_id : grp_id
                            }
                        );
                    }
                    
                    if( dev[ arrAidColums[i] ] > 0  )
                    {
                        cmd_mode = 0;
                        grp_id = dev[ arrAidColums[i] ];

                        //동기화 등록명령 추가 
                        this.syncingList.push(
                            {
                                cmd_mode : cmd_mode, 
                                zb_addr : zb_addr, 
                                grp_id : grp_id
                            }
                        ) ;
                    }

                                
                }
            }catch  ( reason )
            {
                console.error(reason.message);            
            }
        }

        this.syncingListxCurIdx = 0; 
        this.syncStat = 1 ; //동기화중으로 상태 변경 
    }

    /**
     * Zigbee Group ID 동기화 및 조회명령 실행 
     */
    async zbGroupSyncAndView() {

        if( this.syncingListxCurIdx >= this.syncingList.length )
        {
            this.syncStat = 0;  //동기완료 동기대상 다시 로드 
            return;
        }        

        let zbGrpData = this.syncingList[ this.syncingListxCurIdx ];

        try{
            
            let set_param = `{"cmd_mode":${ zbGrpData["cmd_mode"] }, "zb_addr":"${ zbGrpData["zb_addr"] }", "grp_id":${ zbGrpData["grp_id"] }}`;    //그룹등록메세지 
            let viw_param = `{"cmd_mode":2, "zb_addr":"${ zbGrpData["zb_addr"] }"}`;                                                                //그롭조회(확인)메세지 

            // await dbSql.insertCommand("GROUP", set_param);
            // await dbSql.insertCommand("GROUP", viw_param);            
            let message1 = this.makeMqttMessage("GROUP", set_param)              
            this.sendMqtt(message1);
            console.debug("Send to Mqtt(Add  Group Schedule) : " + message1 );    

            //1초후 확인하기 
            setTimeout( (viw_param) => {
                let message2 = this.makeMqttMessage("GROUP", viw_param)              
                this.sendMqtt(message2);
                console.debug("Send to Mqtt(View Group Schedule) : " + message2 );    
            }, 3000, viw_param);
            
        }catch  ( reason )
        {
            console.error(reason.message);            
        }

        this.syncingListxCurIdx++;
    }



    















    /////////////////////// Read data by zb Dev 스케쥴 (View Group)/////////////////////
    /////////////////////// Read data by zb Dev 스케쥴 (View Group)/////////////////////
    async viewGroupSchdMain() {
        
        if( this.syncPlugStat == 1 )    //현재 전체제어 후 상태 동기화 중이라면 View Group 하지 않음 
        {
            setTimeout( ()=>{ this.viewGroupSchdMain() } , 20000);    
            return;
        }
        

        if( this.viewGroupSchdStat == 0 )       //읽기처리 완료 ==> 스케쥴 정보 다시 작성 
        {
            await this.makeViewGroupSchedule();            
        }
        else if( this.viewGroupSchdStat == 1 )  //읽기 처리 
        {
            await this.viewGroupNextCommand();
        }        
        setTimeout( ()=>{ this.viewGroupSchdMain() } , 10000);    //10초당  하나장비  읽기 
    }

    /**
     * 장비 읽기 스케쥴 생성 
     */
    async makeViewGroupSchedule(){

        this.viewGroupSchdList = null;
        this.viewGroupSchdList = new Array();      //Read Schedule List 
               
        try{
            let readDevRows = await dbSql.selectDevices();      // Read Group 목록 
            for ( let dev of readDevRows )
            {                
                let ZB_ADDR = dev['ZB_ADDR'];

                this.viewGroupSchdList.push( { zb_addr : ZB_ADDR, grp_id : null} );                                                               
            }
        }
        catch  ( reason )
        {
            console.error(reason.message);            
        }        

        this.viewGroupSchdListIdx = 0; 
        this.viewGroupSchdStat = 1 ;                              //읽기중으로 상태 변경 
    }

    /**
     * View Group 읽기 명령전송
     */
    async viewGroupNextCommand() {

        if( this.viewGroupSchdListIdx >= this.viewGroupSchdList.length )
        {
            this.viewGroupSchdStat = 0;                           //읽기 완료!! 스케쥴 다시 읽기
            return;
        }        

        let schdData = this.viewGroupSchdList[ this.viewGroupSchdListIdx ];

        try{            
            //let viw_param = `{"cmd_mode":2, "zb_addr":"${ schdData["zb_addr"] }", "grp_id":${ schdData["grp_id"] }}`;  //그롭조회(확인)메세지             
            let viw_param = `{"cmd_mode":2, "zb_addr":"${ schdData["zb_addr"] }"}`;  //그롭조회(확인)메세지
            let message = this.makeMqttMessage("GROUP", viw_param)  
            this.sendMqtt(message);
            
            console.debug("Send to Mqtt(View Group Schedule) : " + message );  

        } catch ( reason )
        {
            console.error(reason.message);            
        }

        this.viewGroupSchdListIdx++;
    }









    /////////////////////// Plug stat 동기화  /////////////////////
    /////////////////////// Plug stat 동기화  /////////////////////    
    async syncPlugStatMain() {
        
        if( this.syncPlugStat == 0 )       //동기화처리 완료 ==> 스케쥴 정보 다시 작성 
        {
            await this.makePlugStatSyncchedule();            
            
            if( this.syncPlugStatList.length <= 0 )
                setTimeout( ()=>{ this.syncPlugStatMain() } , 5000 );         // 동기화대상 없다면 10초 후 
            else 
                setTimeout( ()=>{ this.syncPlugStatMain() } , 500);         // 동기화대상 있다면 즉시 호출 
        }
        else if( this.syncPlugStat == 1 )  //동기화중 
        {
            await this.syncNextPlugStat();

            setTimeout( ()=>{ this.syncPlugStatMain() } , 500);     //0.5 초
        } else {
            setTimeout( ()=>{ this.syncPlugStatMain() } , 10000);   //10  초후 
        }        
    }

    /**
     * 장비 읽기 스케쥴 생성 
     */
    async makePlugStatSyncchedule(){
        this.syncPlugStatListIdx    = 0;
        this.syncPlugStatList       = null;
        this.syncPlugStatList       = new Array();      //Read Schedule List
               
        try{

            let allControlCmd = await dbSql.selectLatAllControl();          //최종 전체 제어 명령 
            
            if( allControlCmd == null || allControlCmd  == undefined || allControlCmd.length <= 0 )
            {
                console.info("Not Found New All ON/OFF Control Commmand !!" );    
                return ;
            }
            
            let ctl_cmd = allControlCmd[0]["CTL_CMD"];    //0:OFF, 1:ON
            
            if( ctl_cmd == 0 ) // OFF 제어 
            {
                let offGroupDevs = await dbSql.selectOffGroupDevMissStat();     // 현재 Zigbee OFF 그룹에 속해 있지만, ON 상태인 플러그 조회 
                console.info("Stat Mismatch Count in OffGroup = ", offGroupDevs.length);

                for ( let dev of offGroupDevs )
                {                
                    let ZB_ADDR = dev['ZB_ADDR'];       

                    this.syncPlugStatList.push( { zb_addr : ZB_ADDR} );
                }

            }else if ( ctl_cmd == 1 ) //ON 제어 
            {

                let onGroupDevs = await dbSql.selectOnGroupDevMissStat();     // 현재 Zigbee ON 그룹에 속해 있지만, OFF 상태인 플러그 조회 
                console.info("Stat Mismatch Count in OnGroup = ", onGroupDevs.length);
                for ( let dev of onGroupDevs )
                {                
                    let ZB_ADDR = dev['ZB_ADDR'];                            
                    this.syncPlugStatList.push( { zb_addr : ZB_ADDR, } );
                }
            }
        }
        catch  ( reason )
        {
            console.error(reason.message);            
        }        

        this.syncPlugStatListIdx = 0; 
        this.syncPlugStat = 1 ; //읽기중으로 상태 변경 
    }

    /**
     * 장비 읽기 명령전송
     */
    async syncNextPlugStat() {

        if( this.syncPlugStatListIdx >= this.syncPlugStatList.length )
        {
            this.syncPlugStat = 0;  //읽기완료 스케쥴 다시 읽기
            return;
        }        

        let schdData = this.syncPlugStatList[ this.syncPlugStatListIdx ];

        try{                        
            let read_param = `{"cmd_mode":0, "id":"${ schdData["zb_addr"] }",  "data_type":0}`;  //ON/OFF 상태 확인 
            let message = this.makeMqttMessage("READ", read_param)  ;
            this.sendMqtt(message);
            
            console.debug("Send to Mqtt(Sync Plug Stat Schedule) : " + message );            
        }catch  ( reason )
        {
            console.error(reason.message);            
        }

        this.syncPlugStatListIdx++;
    }

    /////////////////////// Plug stat 동기화  /////////////////////

















    sendMqtt( message ){    
        this.mqttClient.publish("adapter/gw", `${message}`);    
    }  

    makeMqttMessage( cmd, cmd_param ){

        let obj = {
            "pkn"  : 1,	            //M=패킷구분  			[0:통보(응답불필요),1:요청(응답요구),2:요청(응답불필요),3:응답 ]	                    
            "cmd"  : cmd,	        //M=명령종류  				
            "tno"  : 0, 	        //M=트랜잭션번호 		
            "data" : JSON.parse(cmd_param) 
        };

        return  JSON.stringify(obj);
    }
}


module.exports = function(){
    new ZbGroupThread();
}

